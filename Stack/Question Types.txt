
[Parentheses] [Tough]
--------------------------------------------------------------------------------------------------------
1. Maximum Nesting Depth of the Parentheses 🟩 ✅
2. Remove Outermost Parentheses 🟩 ✅
3. Valid Parentheses 🟩 ✅
4. Minimum Add to Make Parentheses Valid 🟨 ✅
5. Maximum Nesting Depth of Two Valid Parentheses Strings 🟨 ✅ [Dislike > Like ]
6. Reverse Substrings Between Each Pair of Parentheses 🟨 ✅ [Retry]
7. Minimum Remove to Make Valid Parentheses 🟨 ✅ [Retry]
8. Score of Parentheses 🟨 ✅ [Retry] 
9. Minimum Insertions to Balance a Parentheses String 🟨 ✅ [Retry]
10. Check if a Parentheses String Can Be Valid 🟨 ✅ [Retry]
11. Longest Valid Parentheses 🟥  ✅ [Retry]
  
  [Things I Learnt]
  --------------------------------------------------------------------------------------------------------
  1. Maximum Nesting Depth of the Parentheses
    - That Stack method and count method can be used here
    - How to use max function with stack and count method
    - Stack size can be used as max size
    - Stack of char type is used here
    - '(' (open) is being stored in the stack and not ')' and getting poppped out when ')'(close) comes
    -  Also given strings are valid [Given in question]
    
  2. Remove Outermost Parentheses
      
      
      
      
      
      
      
      

[Infix, Prefix, Postfix or expression evaluation] [Easy]
--------------------------------------------------------------------------------------------------------
150. Evaluate Reverse Polish Notation 🟩 ✅ [How to evaluate expression in postfix to expression] [Stack] ⭐️

1. Evaluation of Postfix Expression 🟩 ✅ [GFG] [How to evaluate expression in postfix to expression] [Stack]

2. Postfix to Infix 🟩 ✅ [convert postfix to infix] [Stack]

3. Postfix to Prefix 🟩 ✅ [convert postfix to Prefix] [Stack + reverse code of stack trick] [VVVIIPP] [Trick] ⭐️







4. Infix to Postfix [Shunting Yard algorithm] 🟨 ✅ [Retry] [GFG]
5. Infix to Prefix 🟨 ✅

1106. Parsing A Boolean Expression 🟥  ✅ [Retry]



  [Things I Learnt]
  --------------------------------------------------------------------------------------------------------
   - In posfix questions put operands in stack and pop when operators come , then form the equation accordling.
   
   - Compiler converts infix to postfix to solve the equation / expression , So try converting the expression to postfix if need to be. [VVIIPP] 
   
    
  























[System Design] [Tough]
-------------------------------------------------------------------------------------------------------- 

[Stack and Queue Operations] [Easy]
--------------------------------------------------------------------------------------------------------

[Next Greater Element]
-------------------------------------------------------------------------------------------------------- 



[Extras]
-------------------------------------------------------------------------------------------------------- 




      
         
 
